{
	"info": {
		"_postman_id": "aa6b5cfa-a0cd-4911-bea1-3649335c621f",
		"name": "dz_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ep_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Maryna&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json",
							"var respect = pm.response.json();",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(respect.name).to.eql(\"Maryna\");",
							"});",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(respect.age).to.eql(\"27\");",
							"});",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(respect.salary).to.eql(1000);",
							"});",
							"// 7. Спарсить request.",
							"var req = request.data",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let req_age = respect.age",
							"pm.test(\"Age = request age\", function () {",
							"    pm.expect(req_age).have.eql(respect.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let req_salary = respect.salary",
							"pm.test(\"Salary = request salary\", function () {",
							"    pm.expect(req_salary).have.eql(respect.salary);",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"let resp_family = respect.family",
							"console.log(\"recp_family = \" , resp_family)",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let req_salary_1_5_year = req.salary*4",
							"pm.test(\"u_salary_1_5_year = request salary*4\", function () {",
							"    pm.expect(req_salary_1_5_year).have.eql(req.salary*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maryna",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "27",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var perfect = pm.response.json();",
							"// 4. Спарсить request.",
							"var request = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let request_name = perfect.name",
							"pm.test(\"Name = request name\", function () {",
							"    pm.expect(perfect.name).have.eql(request_name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let request_age = perfect.age",
							"pm.test(\"Age = request age\", function () {",
							"    pm.expect(perfect.age).have.eql(request_age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let request_salary = perfect.salary",
							"pm.test(\"Salary = request salary\", function () {",
							"    pm.expect(perfect.salary).have.eql(request_salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"let resp_family = perfect.family",
							"console.log(\"resp_family = \" , resp_family)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Check name dog\", function () {",
							"    pm.expect(perfect.family.pets.dog).to.have.property(\"name\");",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check age dog\", function () {",
							"    pm.expect(perfect.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Check name Luky\", function () {",
							"    pm.expect(perfect.family.pets.dog.name).to.have.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(perfect.family.pets.dog.age).to.have.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maryna",
							"type": "default",
							"disabled": true
						},
						{
							"key": "age",
							"value": "27",
							"type": "default",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Maryna&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json",
							"var resp = pm.response.json();",
							"// 4. Спарсить request.",
							"var request = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let request_name = resp.name",
							"pm.test(\"Name = requst name\", function () {",
							"    pm.expect(resp.name).have.eql(request_name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let request_age = resp.age",
							"pm.test(\"Age = request age\", function () {",
							"    pm.expect(resp.age).have.eql(request_age);",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"let request_salary = request.salary",
							"console.log(\"request_salary = \" , request_salary)",
							"// 8. Вывести в консоль параметр salary из response",
							"let resp_salary = resp.salary",
							"console.log(\"resp_salary = \" , resp_salary)",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"var salary = resp.salary",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(resp.salary[0]).to.eql(1000);",
							"});",
							"console.log(\"Check salary\", resp_salary[0])",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(resp.salary[1]).to.eql(\"2000\");",
							"});",
							"console.log(\"Check salary\", resp_salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(resp.salary[2]).to.eql(\"3000\");",
							"});",
							"console.log(\"Check salary\", resp_salary[2])",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check salary\", function () {",
							"   pm.expect(+resp.salary[0]).to.eql(+request.salary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check salary\", function () {",
							"   pm.expect(+resp.salary[1]).to.eql(+request.salary*2);",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check salary\", function () {",
							"   pm.expect(+resp.salary[2]).to.eql(+request.salary*3);",
							"});",
							"// 15. Создать в окружении переменную name",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Maryna\");",
							"// 16. Создать в окружении переменную age",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", 27);",
							"// 17. Создать в окружении переменную salary",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", 1000);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (var i = 0; i < resp.salary.length; i++){",
							"    console.log(\"Cycle with salary for element\", i,",
							"    resp.salary[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request",
							"//2. Вставить параметр age из окружения в age",
							"//3. Вставить параметр name из окружения в name",
							"//4. Отправить запрос.",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//6. Спарсить response body в json.",
							"var response = pm.response.json();",
							"//7. Спарсить request.",
							"var request = request.data;",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"start_qa_salary\", function () {",
							"   pm.expect(Object.keys(response)).to.include(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"qa_salary_after_6_months\", function () {",
							"   pm.expect(Object.keys(response)).to.include(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"qa_salary_after_12_months\", function () {",
							"   pm.expect(Object.keys(response)).to.include(\"qa_salary_after_12_months\");",
							"});",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"qa_salary_after_1.5_year\", function () {",
							"   pm.expect(Object.keys(response)).to.include(\"qa_salary_after_1.5_year\");",
							"});",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"qa_salary_after_3.5_years\", function () {",
							"   pm.expect(Object.keys(response)).to.include(\"qa_salary_after_3.5_years\");",
							"});",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"person\", function () {",
							"   pm.expect(Object.keys(response)).to.include(\"person\");",
							"});",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"//let response_start_qa_salary = request.salary",
							"pm.test(\"start_qa_salary = request\", function () {",
							"   pm.expect(response.start_qa_salary).to.eql(+request.salary);",
							"});",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function () {",
							"   pm.expect(response.qa_salary_after_6_months).to.eql(request.salary*2);",
							"});",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {",
							"   pm.expect(response.qa_salary_after_12_months).to.eql(request.salary*2.7);",
							"});",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"let response_qa_salary_after_1_5_year = request.salary*3.3",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {",
							"   pm.expect(response_qa_salary_after_1_5_year).have.eql(request.salary*3.3);",
							"});",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"let response_qa_salary_after_3_5_year = request.salary*3.8",
							"pm.test(\"qa_salary_after_3.5_year = salary*3.8\", function () {",
							"   pm.expect(response_qa_salary_after_3_5_year).have.eql(request.salary*3.8);",
							"});",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"let response_person_u_name = request.salary",
							"pm.test(\"U_name= request_salary\", function () {",
							"   pm.expect(response.person.u_name[1]).to.have.eql(+request.salary);",
							"});",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"//let response_person_u_name = request.salary",
							"pm.test(\"U_age= request_age\", function () {",
							"   pm.expect(response.person.u_age).to.have.eql(+request.age);",
							"});",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"U_salary_5_years = request_salary*4.2\", function () {",
							"   pm.expect(response.person.u_salary_5_years).to.have.eql(+request.salary*4.2);",
							"});",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (var i in response.person){",
							"   console.log(i + ' = ', response.person[i])",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}